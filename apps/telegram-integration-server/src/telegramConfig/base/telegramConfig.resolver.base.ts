/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TelegramConfig } from "./TelegramConfig";
import { TelegramConfigCountArgs } from "./TelegramConfigCountArgs";
import { TelegramConfigFindManyArgs } from "./TelegramConfigFindManyArgs";
import { TelegramConfigFindUniqueArgs } from "./TelegramConfigFindUniqueArgs";
import { CreateTelegramConfigArgs } from "./CreateTelegramConfigArgs";
import { UpdateTelegramConfigArgs } from "./UpdateTelegramConfigArgs";
import { DeleteTelegramConfigArgs } from "./DeleteTelegramConfigArgs";
import { TelegramConfigService } from "../telegramConfig.service";
@graphql.Resolver(() => TelegramConfig)
export class TelegramConfigResolverBase {
  constructor(protected readonly service: TelegramConfigService) {}

  async _telegramConfigsMeta(
    @graphql.Args() args: TelegramConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TelegramConfig])
  async telegramConfigs(
    @graphql.Args() args: TelegramConfigFindManyArgs
  ): Promise<TelegramConfig[]> {
    return this.service.telegramConfigs(args);
  }

  @graphql.Query(() => TelegramConfig, { nullable: true })
  async telegramConfig(
    @graphql.Args() args: TelegramConfigFindUniqueArgs
  ): Promise<TelegramConfig | null> {
    const result = await this.service.telegramConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TelegramConfig)
  async createTelegramConfig(
    @graphql.Args() args: CreateTelegramConfigArgs
  ): Promise<TelegramConfig> {
    return await this.service.createTelegramConfig({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TelegramConfig)
  async updateTelegramConfig(
    @graphql.Args() args: UpdateTelegramConfigArgs
  ): Promise<TelegramConfig | null> {
    try {
      return await this.service.updateTelegramConfig({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TelegramConfig)
  async deleteTelegramConfig(
    @graphql.Args() args: DeleteTelegramConfigArgs
  ): Promise<TelegramConfig | null> {
    try {
      return await this.service.deleteTelegramConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
