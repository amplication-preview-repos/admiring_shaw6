/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TelegramConfigService } from "../telegramConfig.service";
import { TelegramConfigCreateInput } from "./TelegramConfigCreateInput";
import { TelegramConfig } from "./TelegramConfig";
import { TelegramConfigFindManyArgs } from "./TelegramConfigFindManyArgs";
import { TelegramConfigWhereUniqueInput } from "./TelegramConfigWhereUniqueInput";
import { TelegramConfigUpdateInput } from "./TelegramConfigUpdateInput";

export class TelegramConfigControllerBase {
  constructor(protected readonly service: TelegramConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TelegramConfig })
  async createTelegramConfig(
    @common.Body() data: TelegramConfigCreateInput
  ): Promise<TelegramConfig> {
    return await this.service.createTelegramConfig({
      data: data,
      select: {
        apiHash: true,
        apiId: true,
        createdAt: true,
        id: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TelegramConfig] })
  @ApiNestedQuery(TelegramConfigFindManyArgs)
  async telegramConfigs(
    @common.Req() request: Request
  ): Promise<TelegramConfig[]> {
    const args = plainToClass(TelegramConfigFindManyArgs, request.query);
    return this.service.telegramConfigs({
      ...args,
      select: {
        apiHash: true,
        apiId: true,
        createdAt: true,
        id: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TelegramConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async telegramConfig(
    @common.Param() params: TelegramConfigWhereUniqueInput
  ): Promise<TelegramConfig | null> {
    const result = await this.service.telegramConfig({
      where: params,
      select: {
        apiHash: true,
        apiId: true,
        createdAt: true,
        id: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TelegramConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTelegramConfig(
    @common.Param() params: TelegramConfigWhereUniqueInput,
    @common.Body() data: TelegramConfigUpdateInput
  ): Promise<TelegramConfig | null> {
    try {
      return await this.service.updateTelegramConfig({
        where: params,
        data: data,
        select: {
          apiHash: true,
          apiId: true,
          createdAt: true,
          id: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TelegramConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTelegramConfig(
    @common.Param() params: TelegramConfigWhereUniqueInput
  ): Promise<TelegramConfig | null> {
    try {
      return await this.service.deleteTelegramConfig({
        where: params,
        select: {
          apiHash: true,
          apiId: true,
          createdAt: true,
          id: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
