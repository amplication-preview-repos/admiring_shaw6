/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TelegramConfig as PrismaTelegramConfig } from "@prisma/client";

export class TelegramConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TelegramConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.telegramConfig.count(args);
  }

  async telegramConfigs<T extends Prisma.TelegramConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramConfigFindManyArgs>
  ): Promise<PrismaTelegramConfig[]> {
    return this.prisma.telegramConfig.findMany<Prisma.TelegramConfigFindManyArgs>(
      args
    );
  }
  async telegramConfig<T extends Prisma.TelegramConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramConfigFindUniqueArgs>
  ): Promise<PrismaTelegramConfig | null> {
    return this.prisma.telegramConfig.findUnique(args);
  }
  async createTelegramConfig<T extends Prisma.TelegramConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramConfigCreateArgs>
  ): Promise<PrismaTelegramConfig> {
    return this.prisma.telegramConfig.create<T>(args);
  }
  async updateTelegramConfig<T extends Prisma.TelegramConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramConfigUpdateArgs>
  ): Promise<PrismaTelegramConfig> {
    return this.prisma.telegramConfig.update<T>(args);
  }
  async deleteTelegramConfig<T extends Prisma.TelegramConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramConfigDeleteArgs>
  ): Promise<PrismaTelegramConfig> {
    return this.prisma.telegramConfig.delete(args);
  }
}
