/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradeSignalService } from "../tradeSignal.service";
import { TradeSignalCreateInput } from "./TradeSignalCreateInput";
import { TradeSignal } from "./TradeSignal";
import { TradeSignalFindManyArgs } from "./TradeSignalFindManyArgs";
import { TradeSignalWhereUniqueInput } from "./TradeSignalWhereUniqueInput";
import { TradeSignalUpdateInput } from "./TradeSignalUpdateInput";

export class TradeSignalControllerBase {
  constructor(protected readonly service: TradeSignalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradeSignal })
  async createTradeSignal(
    @common.Body() data: TradeSignalCreateInput
  ): Promise<TradeSignal> {
    return await this.service.createTradeSignal({
      data: data,
      select: {
        channelId: true,
        createdAt: true,
        id: true,
        signal: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradeSignal] })
  @ApiNestedQuery(TradeSignalFindManyArgs)
  async tradeSignals(@common.Req() request: Request): Promise<TradeSignal[]> {
    const args = plainToClass(TradeSignalFindManyArgs, request.query);
    return this.service.tradeSignals({
      ...args,
      select: {
        channelId: true,
        createdAt: true,
        id: true,
        signal: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradeSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradeSignal(
    @common.Param() params: TradeSignalWhereUniqueInput
  ): Promise<TradeSignal | null> {
    const result = await this.service.tradeSignal({
      where: params,
      select: {
        channelId: true,
        createdAt: true,
        id: true,
        signal: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradeSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradeSignal(
    @common.Param() params: TradeSignalWhereUniqueInput,
    @common.Body() data: TradeSignalUpdateInput
  ): Promise<TradeSignal | null> {
    try {
      return await this.service.updateTradeSignal({
        where: params,
        data: data,
        select: {
          channelId: true,
          createdAt: true,
          id: true,
          signal: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradeSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradeSignal(
    @common.Param() params: TradeSignalWhereUniqueInput
  ): Promise<TradeSignal | null> {
    try {
      return await this.service.deleteTradeSignal({
        where: params,
        select: {
          channelId: true,
          createdAt: true,
          id: true,
          signal: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
