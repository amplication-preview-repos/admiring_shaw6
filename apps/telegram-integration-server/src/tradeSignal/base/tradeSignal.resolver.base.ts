/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TradeSignal } from "./TradeSignal";
import { TradeSignalCountArgs } from "./TradeSignalCountArgs";
import { TradeSignalFindManyArgs } from "./TradeSignalFindManyArgs";
import { TradeSignalFindUniqueArgs } from "./TradeSignalFindUniqueArgs";
import { CreateTradeSignalArgs } from "./CreateTradeSignalArgs";
import { UpdateTradeSignalArgs } from "./UpdateTradeSignalArgs";
import { DeleteTradeSignalArgs } from "./DeleteTradeSignalArgs";
import { TradeSignalService } from "../tradeSignal.service";
@graphql.Resolver(() => TradeSignal)
export class TradeSignalResolverBase {
  constructor(protected readonly service: TradeSignalService) {}

  async _tradeSignalsMeta(
    @graphql.Args() args: TradeSignalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TradeSignal])
  async tradeSignals(
    @graphql.Args() args: TradeSignalFindManyArgs
  ): Promise<TradeSignal[]> {
    return this.service.tradeSignals(args);
  }

  @graphql.Query(() => TradeSignal, { nullable: true })
  async tradeSignal(
    @graphql.Args() args: TradeSignalFindUniqueArgs
  ): Promise<TradeSignal | null> {
    const result = await this.service.tradeSignal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TradeSignal)
  async createTradeSignal(
    @graphql.Args() args: CreateTradeSignalArgs
  ): Promise<TradeSignal> {
    return await this.service.createTradeSignal({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TradeSignal)
  async updateTradeSignal(
    @graphql.Args() args: UpdateTradeSignalArgs
  ): Promise<TradeSignal | null> {
    try {
      return await this.service.updateTradeSignal({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TradeSignal)
  async deleteTradeSignal(
    @graphql.Args() args: DeleteTradeSignalArgs
  ): Promise<TradeSignal | null> {
    try {
      return await this.service.deleteTradeSignal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
