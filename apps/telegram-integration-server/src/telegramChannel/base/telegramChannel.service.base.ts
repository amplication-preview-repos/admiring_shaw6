/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TelegramChannel as PrismaTelegramChannel,
} from "@prisma/client";

export class TelegramChannelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TelegramChannelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.telegramChannel.count(args);
  }

  async telegramChannels<T extends Prisma.TelegramChannelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramChannelFindManyArgs>
  ): Promise<PrismaTelegramChannel[]> {
    return this.prisma.telegramChannel.findMany<Prisma.TelegramChannelFindManyArgs>(
      args
    );
  }
  async telegramChannel<T extends Prisma.TelegramChannelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramChannelFindUniqueArgs>
  ): Promise<PrismaTelegramChannel | null> {
    return this.prisma.telegramChannel.findUnique(args);
  }
  async createTelegramChannel<T extends Prisma.TelegramChannelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramChannelCreateArgs>
  ): Promise<PrismaTelegramChannel> {
    return this.prisma.telegramChannel.create<T>(args);
  }
  async updateTelegramChannel<T extends Prisma.TelegramChannelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramChannelUpdateArgs>
  ): Promise<PrismaTelegramChannel> {
    return this.prisma.telegramChannel.update<T>(args);
  }
  async deleteTelegramChannel<T extends Prisma.TelegramChannelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TelegramChannelDeleteArgs>
  ): Promise<PrismaTelegramChannel> {
    return this.prisma.telegramChannel.delete(args);
  }
}
