/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TelegramChannel } from "./TelegramChannel";
import { TelegramChannelCountArgs } from "./TelegramChannelCountArgs";
import { TelegramChannelFindManyArgs } from "./TelegramChannelFindManyArgs";
import { TelegramChannelFindUniqueArgs } from "./TelegramChannelFindUniqueArgs";
import { CreateTelegramChannelArgs } from "./CreateTelegramChannelArgs";
import { UpdateTelegramChannelArgs } from "./UpdateTelegramChannelArgs";
import { DeleteTelegramChannelArgs } from "./DeleteTelegramChannelArgs";
import { TelegramChannelService } from "../telegramChannel.service";
@graphql.Resolver(() => TelegramChannel)
export class TelegramChannelResolverBase {
  constructor(protected readonly service: TelegramChannelService) {}

  async _telegramChannelsMeta(
    @graphql.Args() args: TelegramChannelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TelegramChannel])
  async telegramChannels(
    @graphql.Args() args: TelegramChannelFindManyArgs
  ): Promise<TelegramChannel[]> {
    return this.service.telegramChannels(args);
  }

  @graphql.Query(() => TelegramChannel, { nullable: true })
  async telegramChannel(
    @graphql.Args() args: TelegramChannelFindUniqueArgs
  ): Promise<TelegramChannel | null> {
    const result = await this.service.telegramChannel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TelegramChannel)
  async createTelegramChannel(
    @graphql.Args() args: CreateTelegramChannelArgs
  ): Promise<TelegramChannel> {
    return await this.service.createTelegramChannel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TelegramChannel)
  async updateTelegramChannel(
    @graphql.Args() args: UpdateTelegramChannelArgs
  ): Promise<TelegramChannel | null> {
    try {
      return await this.service.updateTelegramChannel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TelegramChannel)
  async deleteTelegramChannel(
    @graphql.Args() args: DeleteTelegramChannelArgs
  ): Promise<TelegramChannel | null> {
    try {
      return await this.service.deleteTelegramChannel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
