/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TelegramChannelService } from "../telegramChannel.service";
import { TelegramChannelCreateInput } from "./TelegramChannelCreateInput";
import { TelegramChannel } from "./TelegramChannel";
import { TelegramChannelFindManyArgs } from "./TelegramChannelFindManyArgs";
import { TelegramChannelWhereUniqueInput } from "./TelegramChannelWhereUniqueInput";
import { TelegramChannelUpdateInput } from "./TelegramChannelUpdateInput";

export class TelegramChannelControllerBase {
  constructor(protected readonly service: TelegramChannelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TelegramChannel })
  async createTelegramChannel(
    @common.Body() data: TelegramChannelCreateInput
  ): Promise<TelegramChannel> {
    return await this.service.createTelegramChannel({
      data: data,
      select: {
        channelId: true,
        channelName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TelegramChannel] })
  @ApiNestedQuery(TelegramChannelFindManyArgs)
  async telegramChannels(
    @common.Req() request: Request
  ): Promise<TelegramChannel[]> {
    const args = plainToClass(TelegramChannelFindManyArgs, request.query);
    return this.service.telegramChannels({
      ...args,
      select: {
        channelId: true,
        channelName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TelegramChannel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async telegramChannel(
    @common.Param() params: TelegramChannelWhereUniqueInput
  ): Promise<TelegramChannel | null> {
    const result = await this.service.telegramChannel({
      where: params,
      select: {
        channelId: true,
        channelName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TelegramChannel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTelegramChannel(
    @common.Param() params: TelegramChannelWhereUniqueInput,
    @common.Body() data: TelegramChannelUpdateInput
  ): Promise<TelegramChannel | null> {
    try {
      return await this.service.updateTelegramChannel({
        where: params,
        data: data,
        select: {
          channelId: true,
          channelName: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TelegramChannel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTelegramChannel(
    @common.Param() params: TelegramChannelWhereUniqueInput
  ): Promise<TelegramChannel | null> {
    try {
      return await this.service.deleteTelegramChannel({
        where: params,
        select: {
          channelId: true,
          channelName: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
